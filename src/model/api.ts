/**
 *
 *
 *
 *
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

/* tslint:disable:no-unused-variable */


export class BLEAddress {
    address: string;
    type: string;
}


export class BLECharacteristic {
    uuid: string;
    path: string;
    value: Array<number>;
    properties: BLECharacteristicProperties;
    descriptors: BLEDescriptors;
}


export class BLECharacteristicProperties {
    read: boolean;
    writeWithoutResponse: boolean;
    write: boolean;
    notify: boolean;
    indicate: boolean;
    authorizedSignedWrite: boolean;
}


export class BLECharacteristics {
    [key: string]: BLECharacteristic;
}


export class BLEConnectionConnParams {
    minConnInterval: number;
    maxConnInterval: number;
    slaveLatency: number;
    connectionSupervisionTimeout: number;
}


export class BLEConnectionOptions {
    scanParams: BLEConnectionScanParams;
    connParams: BLEConnectionConnParams;
    security: BLEConnectionSecurity;
}


export class BLEConnectionScanParams {
    active: boolean;
    interval: number;
    window: number;
    timeout: number;
}


export class BLEConnectionSecurity {
    initiate: boolean;
    autoAccept: boolean;
    securityParams: BLEConnectionSecurityParams;
}


export class BLEConnectionSecurityKeyDistributionConfig {
    enc: boolean;
    id: boolean;
    sign: boolean;
    link: boolean;
}


export class BLEConnectionSecurityParams {
    bond: boolean;
    mitm: boolean;
    lesc: boolean;
    keypress: boolean;
    ioCaps: string;
    minKeySize: number;
    maxKeySize: number;
    oob: boolean;
    kdistOwn: BLEConnectionSecurityKeyDistributionConfig;
    kdistPeer: BLEConnectionSecurityKeyDistributionConfig;
}


export class BLEDescriptor {
    uuid: string;
    path: string;
    value: Array<number>;
}


export class BLEDescriptors {
    [key: string]: BLEDescriptor;
}

export class AdvertisementData {
    advertiseFlag: number;
    serviceUuids: string[];
    localName: string;
    txPower: number;
    manufacturerData: {[key: number]: number[]};
    serviceData: {[key: string]: number[]};
}

export class BLEDevice {
    name: string;
    rssi: number;
    time: string;
    advertisementType: string;
    deviceType: string;
    address: BLEAddress;
    serviceUUIDs: Array<string>;
    advertisementData: AdvertisementData;
}


export class BLEDeviceAuthStatus {
    description: string;
    statusCode: number;
    source: string;
    bonded: boolean;
}


export class BLEDeviceConnectionDatabaseEntry {
    id: string;
    address: BLEAddress;
    connectOptions: BLEConnectionOptions;
    status: BLEDeviceConnectionStatus;
    deviceName: string;
    statistics: BLEDeviceConnectionStatistics;
    raw: any;
}


export class BLEDeviceConnectionError {
    description: string;
    code: number;
}


export class BLEDeviceConnectionPasskey {
    keyType: string;
    key: string;
}


export class BLEDeviceConnectionStatistics {
    addedAt: string;
    lastConnect: string;
    lastDisconnect: string;
    connectCount: number;
    disconnectCount: number;
    rssi: number;
}


export class BLEDeviceConnectionStatus {
    connected: boolean;
    connecting: boolean;
    connectTimedOut: boolean;
    error: BLEDeviceConnectionError;
    auth: BLEDeviceAuthStatus;
}


export class BLEService {
    uuid: string;
    characteristics: BLECharacteristics;
}


export class BLEServices {
    [key: string]: BLEService;
}


export class Event {
    timestamp: string;
    type: string;
    subType: string;
}


export class G2CMessage {
    requestId: string;
    type: string;
    gatewayId: string;
}


export class GatewayInfo {
    platform: string;
    version: string;
    name: string;
    uptime: number;
    connects: number;
    disconnects: number;
    startedAt: string;
    connected: boolean;
}


export class AuthStatusEvent {
    timestamp: string;
    type: string;
    subType: string;
    device: BLEDeviceConnectionDatabaseEntry;
    status: BLEDeviceAuthStatus;
}


export class CharacteristicValueChangedEvent {
    timestamp: string;
    type: string;
    subType: string;
    device: BLEDeviceConnectionDatabaseEntry;
    characteristic: BLECharacteristic;
}


export class CharacteristicValueReadEvent {
    timestamp: string;
    type: string;
    subType: string;
    device: BLEDeviceConnectionDatabaseEntry;
    characteristic: BLECharacteristic;
}


export class CharacteristicValueWriteEvent {
    timestamp: string;
    type: string;
    subType: string;
    device: BLEDeviceConnectionDatabaseEntry;
    characteristic: BLECharacteristic;
}


export class DescriptorValueChangedEvent {
    timestamp: string;
    type: string;
    subType: string;
    device: BLEDeviceConnectionDatabaseEntry;
    descriptor: BLEDescriptor;
}


export class DescriptorValueReadEvent {
    timestamp: string;
    type: string;
    subType: string;
    device: BLEDeviceConnectionDatabaseEntry;
    descriptor: BLEDescriptor;
}


export class DescriptorValueWriteEvent {
    timestamp: string;
    type: string;
    subType: string;
    device: BLEDeviceConnectionDatabaseEntry;
    descriptor: BLEDescriptor;
}


export class DeviceConnectResultEvent {
    timestamp: string;
    type: string;
    subType: string;
    device: BLEDeviceConnectionDatabaseEntry;
}


export class DeviceConnectionNeedPasskeyEvent {
    timestamp: string;
    type: string;
    subType: string;
    device: BLEDeviceConnectionDatabaseEntry;
    keyType: string;
}


export class DeviceDisconnectedEvent {
    timestamp: string;
    type: string;
    subType: string;
    device: BLEDeviceConnectionDatabaseEntry;
}


export class DeviceDiscoverEvent {
    timestamp: string;
    type: string;
    subType: string;
    device: BLEDeviceConnectionDatabaseEntry;
    services: BLEServices;
}


export class G2CEvent {
    requestId: string;
    type: string;
    gatewayId: string;
    event: Event;
}


export class GatewayStatusEvent {
    timestamp: string;
    type: string;
    subType: string;
    connections: Array<BLEDeviceConnectionDatabaseEntry>;
    gatewayInfo: GatewayInfo;
}


export class ScanResultBatchEvent {
    timestamp: string;
    type: string;
    subType: string;
    devices: Array<BLEDevice>;
}


export class ScanResultInstantEvent {
    timestamp: string;
    type: string;
    subType: string;
    devices: Array<BLEDevice>;
    timeout: boolean;
}

